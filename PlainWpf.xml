<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XmlCommentFileReader</name>
    </assembly>
    <members>
        <member name="T:PlainWpf.ViewModels.CsXmlCommentReader">
            <summary>
            
            </summary>
        </member>
        <member name="M:PlainWpf.ViewModels.CsXmlCommentReader.#ctor(System.String,System.Action{System.String},System.Action{System.String},System.Action{System.String,System.String},System.Action{System.String})">
            <summary>
            ToDo
            </summary>
            <param name="filePath"></param>
            <param name="readElement"></param>
            <param name="endElement"></param>
            <param name="readAttribute"></param>
            <param name="readText"></param>
        </member>
        <member name="M:PlainWpf.ViewModels.CsXmlCommentReader.Read(System.String)">
            <summary>
            ToDo
            </summary>
            <param name="filePath"></param>
            <returns>非同期のTaskハンドラ</returns>
        </member>
        <member name="M:PlainWpf.ViewModels.CsXmlCommentReader.ReadXml">
            <summary>
            ToDo
            </summary>
            <returns></returns>
        </member>
        <member name="T:PlainWpf.ViewModels.CsXmlCommentReaderException">
            <summary>
            
            </summary>
        </member>
        <member name="M:PlainWpf.ViewModels.CsXmlCommentReaderException.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:PlainWpf.ViewModels.XmlTreeViewModel">
            <summary>
            
            </summary>
        </member>
        <member name="M:PlainWpf.ViewModels.XmlTreeViewModel.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:PlainWpf.ViewModels.XmlTreeViewModel.TreeViewItems">
            <summary>
            
            </summary>
        </member>
        <member name="P:PlainWpf.ViewModels.XmlTreeViewModel.DropFile">
            <summary>
            
            </summary>
        </member>
        <member name="T:PlainWpf.SingleBootableApp">
            <summary>
            2重起動防止アプリケーションクラス
            http://kisuke0303.sakura.ne.jp/blog/?p=182 WPF で二重起動を防止する
            http://www.geocities.jp/litorud/WPF.html#9 二重起動を防止し、起動中のウィンドウをアクティブにする
            
            スタートアップクラスAppの基底クラスApplicationと差し替えて使う
            xamlの基底クラスも差し替える
            </summary>
        </member>
        <member name="F:PlainWpf.SingleBootableApp.applicationId">
            <summary>
            実際はUUIDなどが良い。
            </summary>
        </member>
        <member name="F:PlainWpf.SingleBootableApp.appName">
            <summary>
            コンストラクタでアプリケーション名を習得
            </summary>
        </member>
        <member name="F:PlainWpf.SingleBootableApp.mutex">
            <summary>
            起動フラグ用ミューテックス
            アプリケーション名使用
            </summary>
        </member>
        <member name="M:PlainWpf.SingleBootableApp.DoubleBootCheckAndRegist">
            <summary>
            スタートアップ時のミューテックスのチェックと拾得
            </summary>
        </member>
        <member name="M:PlainWpf.SingleBootableApp.DoubleBootRelease">
            <summary>
            終了時のミューテックスの解放
            </summary>
        </member>
        <member name="T:PlainWpf.SingleBootableApp.IpcHandler">
            <summary>
            IPC用ハンドラ
            </summary>
        </member>
        <member name="T:PlainWpf.Views.SubPage2">
            <summary>
            SubPage1.xaml の相互作用ロジック
            </summary>
            <summary>
            SubPage2
            </summary>
        </member>
        <member name="M:PlainWpf.Views.SubPage2.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:PlainWpf.Views.SubPage1">
            <summary>
            SubPage1.xaml の相互作用ロジック
            </summary>
            <summary>
            SubPage1
            </summary>
        </member>
        <member name="M:PlainWpf.Views.SubPage1.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:PlainWpf.Views.XmlTreeView">
            <summary>
            XmlTreeView.xaml の相互作用ロジック
            </summary>
            <summary>
            XmlTreeView
            </summary>
        </member>
        <member name="M:PlainWpf.Views.XmlTreeView.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:PlainWpf.Views.MainWindow">
            <summary>
            MainWindow.xaml の相互作用ロジック
            </summary>
            <summary>
            MainWindow
            </summary>
        </member>
        <member name="M:PlainWpf.Views.MainWindow.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:PlainWpf.App">
            <summary>
            App.xaml の相互作用ロジック
            </summary>
            <summary>
            App
            </summary>
        </member>
        <member name="M:PlainWpf.App.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="M:PlainWpf.App.Main">
            <summary>
            Application Entry Point.
            </summary>
        </member>
        <member name="T:PlainWpf.Properties.Resources">
            <summary>
              ローカライズされた文字列などを検索するための、厳密に型指定されたリソース クラスです。
            </summary>
        </member>
        <member name="P:PlainWpf.Properties.Resources.ResourceManager">
            <summary>
              このクラスで使用されるキャッシュされた ResourceManager インスタンスを返します。
            </summary>
        </member>
        <member name="P:PlainWpf.Properties.Resources.Culture">
            <summary>
              厳密に型指定されたこのリソース クラスを使用して、すべての検索リソースに対し、
              現在のスレッドの CurrentUICulture プロパティをオーバーライドします。
            </summary>
        </member>
        <member name="T:Behaviours.FileDragBehaviour">
            <summary>
            ファイルのＤ＆Ｄを受け入れるビヘイビア
            </summary>
        </member>
        <member name="M:Behaviours.FileDragBehaviour.GetMultiSelect(System.Windows.DependencyObject)">
            <summary>
            複数ファイルドロップ可能添付プロパティのGetter
            </summary>
            <param name="obj"></param>
            <returns>True=複数可、False=一つのファイルのみ</returns>
        </member>
        <member name="M:Behaviours.FileDragBehaviour.SetMultiSelect(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            複数ファイルドロップ可能添付プロパティのSetter
            </summary>
            <param name="obj"></param>
            <param name="value">True=複数可、False=一つのファイルのみ</param>
        </member>
        <member name="F:Behaviours.FileDragBehaviour.MultiSelectProperty">
            <summary>
            複数ファイルドロップ可能添付プロパティ
            </summary>
        </member>
        <member name="M:Behaviours.FileDragBehaviour.GetDragFileExt(System.Windows.DependencyObject)">
            <summary>
            Ｄ＆Ｄ許可する拡張子をセットする添付プロパティのGetter
            </summary>
            <param name="obj"></param>
            <returns>ドットからの拡張子、コロンセパレータで複数指定可、ワイルドカード指定可</returns>
        </member>
        <member name="M:Behaviours.FileDragBehaviour.SetDragFileExt(System.Windows.DependencyObject,System.String)">
            <summary>
            Ｄ＆Ｄ許可する拡張子をセットする添付プロパティのSetter
            </summary>
            <param name="obj"></param>
            <param name="value">ドットからの拡張子、コロンセパレータで複数指定可、ワイルドカード指定可</param>
        </member>
        <member name="F:Behaviours.FileDragBehaviour.DragFileExtProperty">
            <summary>
            Ｄ＆Ｄ許可する拡張子をセットする添付プロパティ
            </summary>
        </member>
        <member name="F:Behaviours.FileDragBehaviour.FileExtRegex">
            <summary>
            DragFileExtの検証用正規表現
            </summary>
        </member>
        <member name="M:Behaviours.FileDragBehaviour.GetDropCommand(System.Windows.DependencyObject)">
            <summary>
            ファイルがドロップされたときに呼び出されるコマンドの添付プロパティのGetter
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Behaviours.FileDragBehaviour.SetDropCommand(System.Windows.DependencyObject,System.Windows.Input.ICommand)">
            <summary>
            ファイルがドロップされたときに呼び出されるコマンドの添付プロパティのSetter
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Behaviours.FileDragBehaviour.DropCommandProperty">
            <summary>
            ファイルがドロップされたときに呼び出されるコマンドの添付プロパティ
            </summary>
        </member>
        <member name="M:Behaviours.FileDragBehaviour.Obj_Drop(System.Object,System.Windows.DragEventArgs)">
            <summary>
            ドロップ時のイベントハンドラ
            </summary>
            <param name="sender">ドロップ先のコントロール</param>
            <param name="e">ドロップパラメータ</param>
        </member>
        <member name="M:Behaviours.FileDragBehaviour.Obj_DragOver(System.Object,System.Windows.DragEventArgs)">
            <summary>
            ドラッグ時のイベントハンドラ
            </summary>
            <param name="sender">ドラッグ先のコントロール</param>
            <param name="e">ドラッグパラメータ</param>
        </member>
        <member name="T:Behaviours.GridLengthAnimation">
            <summary>
            Animates a grid length value just like the DoubleAnimation animates a double value
            </summary>
        </member>
        <member name="P:Behaviours.GridLengthAnimation.IsCompleted">
            <summary>
            Marks the animation as completed
            </summary>
        </member>
        <member name="P:Behaviours.GridLengthAnimation.ReverseValue">
            <summary>
            Sets the reverse value for the second animation
            </summary>
        </member>
        <member name="F:Behaviours.GridLengthAnimation.ReverseValueProperty">
            <summary>
            Dependency property. Sets the reverse value for the second animation
            </summary>
        </member>
        <member name="P:Behaviours.GridLengthAnimation.TargetPropertyType">
            <summary>
            Returns the type of object to animate
            </summary>
        </member>
        <member name="M:Behaviours.GridLengthAnimation.CreateInstanceCore">
            <summary>
            Creates an instance of the animation object
            </summary>
            <returns>Returns the instance of the GridLengthAnimation</returns>
        </member>
        <member name="F:Behaviours.GridLengthAnimation.FromProperty">
            <summary>
            Dependency property for the From property
            </summary>
        </member>
        <member name="P:Behaviours.GridLengthAnimation.From">
            <summary>
            CLR Wrapper for the From depenendency property
            </summary>
        </member>
        <member name="F:Behaviours.GridLengthAnimation.ToProperty">
            <summary>
            Dependency property for the To property
            </summary>
        </member>
        <member name="P:Behaviours.GridLengthAnimation.To">
            <summary>
            CLR Wrapper for the To property
            </summary>
        </member>
        <member name="M:Behaviours.GridLengthAnimation.VerifyAnimationCompletedStatus(System.Windows.Media.Animation.AnimationClock)">
            <summary>
            registers to the completed event of the animation clock
            </summary>
            <param name="clock">the animation clock to notify completion status</param>
        </member>
        <member name="M:Behaviours.GridLengthAnimation.GetCurrentValue(System.Object,System.Object,System.Windows.Media.Animation.AnimationClock)">
            <summary>
            Animates the grid let set
            </summary>
            <param name="defaultOriginValue">The original value to animate</param>
            <param name="defaultDestinationValue">The final value</param>
            <param name="animationClock">The animation clock (timer)</param>
            <returns>Returns the new grid length to set</returns>
        </member>
        <member name="T:Behaviours.ExpanderDoubleAnimation">
            <summary>
            Animates a double value 
            </summary>
        </member>
        <member name="F:Behaviours.ExpanderDoubleAnimation.FromProperty">
            <summary>
            Dependency property for the From property
            </summary>
        </member>
        <member name="P:Behaviours.ExpanderDoubleAnimation.From">
            <summary>
            CLR Wrapper for the From depenendency property
            </summary>
        </member>
        <member name="F:Behaviours.ExpanderDoubleAnimation.ToProperty">
            <summary>
            Dependency property for the To property
            </summary>
        </member>
        <member name="P:Behaviours.ExpanderDoubleAnimation.To">
            <summary>
            CLR Wrapper for the To property
            </summary>
        </member>
        <member name="P:Behaviours.ExpanderDoubleAnimation.ReverseValue">
            <summary>
            Sets the reverse value for the second animation
            </summary>
        </member>
        <member name="F:Behaviours.ExpanderDoubleAnimation.ReverseValueProperty">
            <summary>
            Sets the reverse value for the second animation
            </summary>
        </member>
        <member name="M:Behaviours.ExpanderDoubleAnimation.CreateInstanceCore">
            <summary>
            Creates an instance of the animation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Behaviours.ExpanderDoubleAnimation.GetCurrentValueCore(System.Double,System.Double,System.Windows.Media.Animation.AnimationClock)">
            <summary>
            Animates the double value
            </summary>
            <param name="defaultOriginValue">The original value to animate</param>
            <param name="defaultDestinationValue">The final value</param>
            <param name="animationClock">The animation clock (timer)</param>
            <returns>Returns the new double to set</returns>
        </member>
        <member name="T:Mvvm.BindableBase">
            <summary>
            ビューモデル等の基底に使うベースクラス
            </summary>
            <inherited name="INotifyPropertyChanged">プロパティ変更通知</inherited>
            <inherited name="INotifyDataErrorInfo">プロパティ検証エラー通知</inherited>
        </member>
        <member name="M:Mvvm.BindableBase.#ctor">
            <summary>
            基底コンストラクタ
            </summary>
        </member>
        <member name="F:Mvvm.BindableBase.hasErrors">
            <summary>
            検証エラーがあるプロパティ名と検証エラーメッセージのリスト
            </summary>
        </member>
        <member name="P:Mvvm.BindableBase.HasErrors">
            <summary>
            検証エラー状態
            </summary>
            <override name="INotifyDataErrorInfo"></override>
            <returns>True=エラーあり,False=エラーなし</returns>
        </member>
        <member name="E:Mvvm.BindableBase.ErrorsChanged">
            <summary>
            検証エラー通知イベント
            </summary>
            <override name="INotifyDataErrorInfo"></override>
        </member>
        <member name="M:Mvvm.BindableBase.RaiseErrorsChanged(System.String,System.String)">
            <summary>
            プロパティの検証後に呼び出す。検証エラー通知イベント起動メソッド
            </summary>
            <override name="INotifyPropertyChanged"></override>
            <param name="errorMessage">nullまたは空の文字列でエラーなしまたはエラー状態解除、空白文字列または文字列はエラー状態メッセージ</param>
            <param name="propertyName">エラー状態にあるプロパティ名</param>
        </member>
        <member name="M:Mvvm.BindableBase.SetError(System.String,System.String)">
            <summary>
            プロパティの検証後にエラー状態なら呼び出す。検証エラー通知イベント起動メソッドを呼び出す
            </summary>
            <param name="errorMessage">エラーメッセージ、メッセージが空なら自動生成</param>
            <param name="propertyName">エラー状態のプロパティ名</param>
        </member>
        <member name="M:Mvvm.BindableBase.ResetError(System.String)">
            <summary>
            プロパティの検証後にエラー状態解除なら呼び出す。検証エラー通知イベント起動メソッドを呼び出す
            </summary>
            <param name="propertyName">エラー解除状態のプロパティ名</param>
        </member>
        <member name="M:Mvvm.BindableBase.GetErrors(System.String)">
            <summary>
            エラー状態プロパティのエラーメッセージ
            </summary>
            <param name="propertyName">プロパティ名</param>
            <returns>指定したプロパティのエラーメッセージ</returns>
        </member>
        <member name="E:Mvvm.BindableBase.PropertyChanged">
            <summary>
            変更通知イベント
            </summary>
            <override name="INotifyPropertyChanged"></override>
        </member>
        <member name="M:Mvvm.BindableBase.RaisePropertyChanged(System.String)">
            <summary>
            変更通知イベント起動メソッド
            </summary>
            <param name="propertyName">変更通知するプロパティ名</param>
        </member>
        <member name="M:Mvvm.BindableBase.SetProperty``1(``0@,``0,System.String)">
            <summary>
            プロパティフィールド代入メソッド
            </summary>
            <typeparam name="T">プロパティフィールドの型</typeparam>
            <param name="storage">プロパティフィールドへの参照</param>
            <param name="value">プロパティフィールドへの代入値</param>
            <param name="propertyName">プロパティ名</param>
            <returns>True=フィールド値が変更された,False=されなかった</returns>
        </member>
        <member name="T:Mvvm.INavigationStory">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mvvm.INavigationStory.Initialize(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Action{System.Windows.FrameworkElement})">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Mvvm.INavigationStory.Animate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mvvm.SimpleWipeNavigationStory">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mvvm.SimpleWipeNavigationStory.WipeNavigationMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mvvm.SimpleWipeNavigationStory.WipeNavigationMode.Spread">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mvvm.SimpleWipeNavigationStory.WipeNavigationMode.Narrowed">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mvvm.SimpleWipeNavigationStory.NavigationMode">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mvvm.SimpleWipeNavigationStory.Initialize(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Action{System.Windows.FrameworkElement})">
            <summary>
            
            </summary>
            <param name="fromContent"></param>
            <param name="toContent"></param>
            <param name="endAnimation"></param>
            <returns></returns>
        </member>
        <member name="M:Mvvm.SimpleWipeNavigationStory.Animate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mvvm.SimpleRaiseNavigationStory">
            <summary>
            
            </summary>
            <uri name="http://techoh.net/wpf-control-storyboard-with-code/">2分でできるC#コードからWPFのアニメーションを操る方法</uri>
        </member>
        <member name="T:Mvvm.SimpleRaiseNavigationStory.RaiseNavigationMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mvvm.SimpleRaiseNavigationStory.RaiseNavigationMode.RightToLeft">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mvvm.SimpleRaiseNavigationStory.RaiseNavigationMode.LeftToRight">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mvvm.SimpleRaiseNavigationStory.RaiseNavigationMode.BottomToTop">
            <summary>
            
            </summary>
        </member>
        <member name="F:Mvvm.SimpleRaiseNavigationStory.RaiseNavigationMode.TopToBottom">
            <summary>
            
            </summary>
        </member>
        <member name="P:Mvvm.SimpleRaiseNavigationStory.NavigationMode">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mvvm.SimpleRaiseNavigationStory.Initialize(System.Windows.FrameworkElement,System.Windows.FrameworkElement,System.Action{System.Windows.FrameworkElement})">
            <summary>
            
            </summary>
            <param name="fromContent"></param>
            <param name="toContent"></param>
            <param name="endAnimation"></param>
            <returns></returns>
        </member>
        <member name="M:Mvvm.SimpleRaiseNavigationStory.Animate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Mvvm.NavigationServiceEx">
            <summary>
            ページナビゲーションを行うクラス
            </summary>
            <url name="http://sourcechord.hatenablog.com/entry/2016/02/01/003758">WPFでシンプルな独自ナビゲーション処理のサンプルを書いてみた</url>
        </member>
        <member name="P:Mvvm.NavigationServiceEx.Content">
            <summary>
            ページナビゲーションを行う領域となるContentControlを保持するAccessor
            </summary>
        </member>
        <member name="F:Mvvm.NavigationServiceEx.ContentProperty">
            <summary>
            ページナビゲーションを行う領域となるContentControlを保持するプロパティ
            </summary>
        </member>
        <member name="M:Mvvm.NavigationServiceEx.Navigate(System.Windows.FrameworkElement)">
            <summary>
            view引数で指定されたインスタンスのページへとナビゲーションを行います。
            </summary>
            <param name="view"></param>
            <returns>成功True、失敗False</returns>
        </member>
        <member name="M:Mvvm.NavigationServiceEx.Navigate(System.Type)">
            <summary>
            viewType引数で指定された型のインスタンスを生成し、そのインスタンスのページへとナビゲーションを行います。
            </summary>
            <param name="viewType">遷移するページのType</param>
            <returns>成功True、失敗False</returns>
        </member>
        <member name="M:Mvvm.NavigationServiceEx.OnGoToPage(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            NavigationCommands.GoToPageコマンドに対する応答処理
            </summary>
            <param name="sender">未使用</param>
            <param name="e">e.Parameterに遷移するページのType</param>
        </member>
        <member name="M:Mvvm.NavigationServiceEx.GetNavigationStory(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mvvm.NavigationServiceEx.SetNavigationStory(System.Windows.DependencyObject,Mvvm.INavigationStory)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Mvvm.NavigationServiceEx.NavigationStoryProperty">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mvvm.NavigationServiceEx.GetTarget(System.Windows.DependencyObject)">
            <summary>
            この添付プロパティで指定した値は、NavigationServiceEx.Contentプロパティとバインドして同期するようにして扱う。
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mvvm.NavigationServiceEx.SetTarget(System.Windows.DependencyObject,System.Windows.Controls.ContentControl)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Mvvm.NavigationServiceEx.TargetProperty">
            <summary>
            Using a DependencyProperty as the backing store for Target.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Mvvm.NavigationServiceEx.GetStartup(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mvvm.NavigationServiceEx.SetStartup(System.Windows.DependencyObject,System.Type)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Mvvm.NavigationServiceEx.StartupProperty">
            <summary>
            Using a DependencyProperty as the backing store for Startup.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="M:Mvvm.NavigationServiceEx.GetStoryboard(System.Windows.DependencyObject)">
            <summary>
            ページ遷移時のアニメーション添付プロパティのGetter
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mvvm.NavigationServiceEx.SetStoryboard(System.Windows.DependencyObject,System.Windows.Media.Animation.Storyboard)">
            <summary>
            ページ遷移時のアニメーション添付プロパティのSetter
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Mvvm.NavigationServiceEx.StoryboardProperty">
            <summary>
            ページ遷移時のアニメーション添付プロパティ
            </summary>
        </member>
        <member name="M:Mvvm.NavigationServiceEx.OnStoryboardChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            ページ遷移時のアニメーション添付プロパティのハンドラ
            </summary>
            <param name="d"></param>
            <param name="e"></param>
        </member>
        <member name="M:Mvvm.NavigationServiceEx.GetNavigator(System.Windows.DependencyObject)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Mvvm.NavigationServiceEx.SetNavigator(System.Windows.DependencyObject,Mvvm.NavigationServiceEx)">
            <summary>
            ↓protectedにして外部からは利用できないように。
            </summary>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="F:Mvvm.NavigationServiceEx.NavigatorProperty">
            <summary>
            Using a DependencyProperty as the backing store for Navigator.  This enables animation, styling, binding, etc...
            </summary>
        </member>
        <member name="T:Mvvm.NavigationServiceExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Mvvm.NavigationServiceExtensions.Navigate(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>
            view引数で指定されたインスタンスのページへとナビゲーションを行います。
            </summary>
            <param name="element"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:Mvvm.NavigationServiceExtensions.Navigate(System.Windows.FrameworkElement,System.Type)">
            <summary>
            viewType引数で指定された型のインスタンスを生成し、そのインスタンスのページへとナビゲーションを行います。
            </summary>
            <param name="element"></param>
            <param name="viewType"></param>
            <returns></returns>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
